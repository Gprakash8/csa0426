#include <stdio.h>

// Structure to represent a process
struct Process {
    int processID;
    int burstTime;
};

// Function to sort an array of processes based on their burst time
void sortProcesses(struct Process* processes, int n) {
    int i, j;
    struct Process temp;
    for
    (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time of each process
void calculateTimes(struct Process* processes, int n, int* waitingTime, int* turnaroundTime) {
    // Initialize waiting time of the first process as 0
    waitingTime[0] = 0;

    // Calculate waiting time of each process
    for (int i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + processes[i - 1].burstTime;
    }

    // Calculate turnaround time of each process
    for (int i = 0; i < n; i++) {
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }
}

// Function to calculate average waiting time and average turnaround time
void calculateAverageTimes(struct Process* processes, int n) {
    int waitingTime[n], turnaroundTime[n];
    int totalWaitingTime = 0, totalTurnaroundTime = 0;

    calculateTimes(processes, n, waitingTime, turnaroundTime);

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");

    // Print process details and accumulate total times
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    // Calculate and print average times
    float avgWaitingTime = (float)totalWaitingTime / n;
    float avgTurnaroundTime = (float)totalTurnaroundTime / n;
    printf("\nAverage Waiting Time: %.2f", avgWaitingTime);
    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
}

// Main function
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Read burst time for each process
    for (int i = 0; i < n; i++) {
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].processID = i + 1;
    }

    // Sort the processes based on their burst time
    sortProcesses(processes, n);

    // Calculate and display the average waiting time and average turnaround time
    calculateAverageTimes(processes, n);

    return 0;
}
